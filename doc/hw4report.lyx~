#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrartcl
\begin_preamble
\usepackage{fancyheadings}
\pagestyle{fancy}
\lhead{Team Samurai}
\chead{Project 4 Report}
\rhead{Modified: \date{\today} Page: \thepage}
\cfoot{}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth -1
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
A simple but powerful GUI Front-end for GridRover
\end_layout

\begin_layout Subject
CS 3505 Homework 04 Report
\end_layout

\begin_layout Author
Lucas Adam M.
 Paul (00294068), Nathan Hansen (00637655)
\end_layout

\begin_layout Abstract
The Qt Graphics View framework is a powerful tool for visualization in a
 graphical user interface.
 In this paper, we describe the minimal effort it took to transform an existing
 demonstration program (chips) into a simple overhead-view map inteface.
 We explain how this will be useful to a later project (GridRover).
\end_layout

\begin_layout Abstract
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
tableofcontents{}
\end_layout

\begin_layout Plain Layout


\backslash
pagebreak{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

 
\backslash
setcounter{page}{1}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Intro
\end_layout

\begin_layout Standard
The purpose of this exercise was to familiarize the team with the Qt GUI
 toolkit and its usefulness in creating cross-platform graphical programs.
 Our team strongly desired a project that would not simply be a toy, but
 would actually be useful in some way.
 After some discussion about the following, final project for the term,
 the team decided to work toward a graphical front-end for the planned final
 project, an educational simulation/game.
\end_layout

\begin_layout Standard
GridRover is planned to be a reimplementation of an earlier game called
 Cassini.
 Cassini featured an autonomous rover exploring the surface of Saturn's
 moon, Titan.
 A player would write a program to control this rover for the entire course
 of the game, and points would be awarded for the amount of the surface
 explored and for interesting items returned to the lander for study.
 It made use of a simple, but effective overhead-view map to visualize events
 in the game.
 We planned to create a similar front-end for our eventual implementation
 of GridRover.
\end_layout

\begin_layout Section
Originally Planned Features
\end_layout

\begin_layout Standard
Cassini's GUI included an overhead-view map of the surface of Titan (or
 rather, a randomly generated surface meant to represent a possible Titan).
 The map consisted of a grid of square terrain tiles of equal size.
 The locations of the rover and its lander were indicated on the map with
 icons.
\end_layout

\begin_layout Standard
The goal the team set out to accomplish was fairly modest: A program that
 would display a map of terrain tiles, similar to one Cassini might have
 shown, as dictated by a model.
 A dummy model would be used at first, and would later be replaced with
 some portion of the GridRover game engine.
\end_layout

\begin_layout Standard
We found a suitable Qt demo from which to begin our efforts: The chips demo
 uses a QGraphicsView to display 40,000 vector graphics in an easily scrollable,
 rotatable, and zoom-able window.
 Beginning our efforts from here will mean that players will be able to
 zoom, rotate, and scroll their view of Titan without any extra effort on
 our part.
\end_layout

\begin_layout Section
Implemented Features
\end_layout

\begin_layout Standard
By the end of the project, our program generates and displays square maps
 of fixed size.
 Each map is randomly generated by a dummy model when the program runs.
 Each map consists of terrain tiles taken from actual images of Titan's
 surface.
 The program assumes all tiles are the same size, but can operate correctly
 no matter what that size happens to be.
\end_layout

\begin_layout Standard
The final program compared to the original one can be found below.
 The differnce is that the window only contains one copy of the view, also
 the view randomly generates the map instead of only generating one image.
 The addition of the regenerate button will create a new map and display
 it on the screen.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Nathan Hansen/Pictures/University Of Utah/2012 Spring/CS 3505/First Load.PNG
	width 80page%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
The modified version of the Chips Demo to include the random map generator
 as well as a single pane.
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset VSpace defskip
\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename C:/Users/Nathan Hansen/Pictures/University Of Utah/2012 Spring/CS 3505/chip-demo.png
	width 80page%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
The original Chips demo, Image provided by Nokia.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Time Usage
\end_layout

\begin_layout Standard
The overall team spent approxamitly 22 hours on this project.
 With most time being in research of a proper solution.
 The coding time is estimated to be 7 hours for each team member.
 
\end_layout

\begin_layout Section
Summary
\end_layout

\begin_layout Standard
This project allowed the team to create a basic framework that will need
 little modifications to create the final implementation.
 While the project may have appeared to have been simplified from the origional
 program we have laid the building blocks for the Qt Grid Rover front end.
 The power of this project is that the map display has been created, what
 remains boils down to the objects a rover encounters and the rover itself
 need to be displayed.
 The next step for the final project is to decided if the controller will
 be controlled through event driven programming or direct function calls.
\end_layout

\begin_layout Standard
As a team we were able to decode the Chips program and convert it to the
 the GridRover Viewer Very efficiently.
 It also became apperent that since the Scene was populated by the main
 window but the button was contained in the view a clever method was needed
 to pass the clicked event.
 The button was made public as to prevent tight coupling of the main window
 to the view.
 That way the main window could change the method in which in regenerates
 the map without the needed to change the code of the view.
 This effective use of loose coupling will improve the scaleability of this
 program.
 This effective management of time and resouces allowed us to minimize developme
nt costs.
 This is why we deserve an A.
\end_layout

\end_body
\end_document
